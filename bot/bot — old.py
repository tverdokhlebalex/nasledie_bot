import os
import re
import sys
import csv
import json
import asyncio
import logging
from typing import Dict, Tuple, Optional, List, Any

import aiohttp
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ContentType
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo,
)
from aiogram.types.error_event import ErrorEvent

# --------------------
# –ö–æ–Ω—Ñ–∏–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
if not BOT_TOKEN or not re.match(r"^\d+:[\w-]+$", BOT_TOKEN):
    logging.critical("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env / env_file.")
    sys.exit(1)

_api_base = os.getenv("API_BASE") or os.getenv("API_URL", "http://app:8000")
API_BASE = _api_base.rstrip("/")
APP_SECRET = os.getenv("APP_SECRET", "change-me-please")

# –°—Ç—Ä–æ–≥–∏–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
STRICT_WHITELIST = os.getenv("STRICT_WHITELIST", "true").lower() in ("1", "true", "yes", "y")

# –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
TEAM_SIZE = int(os.getenv("TEAM_SIZE", "7"))

# WebApp URL (–¥–ª—è Telegram –Ω—É–∂–µ–Ω HTTPS; –ª–æ–∫–∞–ª—å–Ω–æ http + ?dev_tg=‚Ä¶)
WEBAPP_URL = (os.getenv("WEBAPP_URL") or f"{API_BASE}/webapp").strip()

# CSV —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
PARTICIPANTS_CSV = os.getenv("PARTICIPANTS_CSV", "/code/data/participants.csv")
PARTICIPANTS_CSV_FALLBACK = "/code/data/participants_template.csv"

# HTTP –∫–ª–∏–µ–Ω—Ç
CLIENT_TIMEOUT = aiohttp.ClientTimeout(total=15, connect=5, sock_connect=5, sock_read=10)
HTTP: Optional[aiohttp.ClientSession] = None

# --------------------
# –£—Ç–∏–ª–∏—Ç—ã
# --------------------
def norm_phone(s: str) -> str:
    if not s:
        return ""
    s = re.sub(r"[^\d+]", "", s.strip())
    if s.startswith("8") and len(s) == 11:
        s = "+7" + s[1:]
    if s.isdigit() and len(s) == 11 and s[0] == "7":
        s = "+" + s
    return s


def parse_name_simple(text: str) -> Tuple[str, Optional[str]]:
    """
    –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –∏–º—è, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Ñ–∞–º–∏–ª–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    """
    t = " ".join((text or "").replace(",", " ").replace(".", " ").split()).strip()
    if not t:
        return "", None
    parts = t.split()
    first = parts[0].title()
    last = " ".join(parts[1:]).title() if len(parts) > 1 else None
    return first, last


def api_url(path: str) -> str:
    return f"{API_BASE}{path}"


def headers_json() -> dict:
    return {"x-app-secret": APP_SECRET, "Content-Type": "application/json"}


def build_webapp_url(tg_id: int | str) -> str:
    """
    –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ Telegram WebApp –Ω—É–∂–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π HTTPS.
    –õ–æ–∫–∞–ª—å–Ω–æ (http/localhost/127.0.0.1) ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º ?dev_tg=‚Ä¶ –¥–ª—è dev-—Ä–µ–∂–∏–º–∞.
    """
    url = WEBAPP_URL
    low = url.lower()
    if low.startswith("http://") or "localhost" in low or "127.0.0.1" in low:
        sep = "&" if "?" in url else "?"
        url = f"{url}{sep}dev_tg={tg_id}"
    return url


def webapp_markup(tg_id: int | str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=build_webapp_url(tg_id))
            )
        ]]
    )


async def get_http() -> aiohttp.ClientSession:
    global HTTP
    if HTTP is None or HTTP.closed:
        HTTP = aiohttp.ClientSession(timeout=CLIENT_TIMEOUT)
    return HTTP


async def api_get(path: str) -> tuple[int, str]:
    url = api_url(path)
    s = await get_http()
    try:
        async with s.get(url, headers={"x-app-secret": APP_SECRET}) as resp:
            txt = await resp.text()
            return resp.status, txt
    except aiohttp.ClientError as e:
        logging.error("GET %s failed: %r", url, e)
        raise


async def api_post(path: str, payload: dict) -> tuple[int, str]:
    url = api_url(path)
    s = await get_http()
    try:
        async with s.post(url, headers=headers_json(), json=payload) as resp:
            txt = await resp.text()
            return resp.status, txt
    except aiohttp.ClientError as e:
        logging.error("POST %s failed: %r", url, e)
        raise


async def api_post_form(path: str, form_data: dict) -> tuple[int, str]:
    url = api_url(path)
    s = await get_http()
    try:
        async with s.post(url, headers={"x-app-secret": APP_SECRET}, data=form_data) as resp:
            txt = await resp.text()
            return resp.status, txt
    except aiohttp.ClientError as e:
        logging.error("POST %s (form) failed: %r", url, e)
        raise


async def register_user_via_api(tg_id: int | str, phone: str, first_name: str, last_name: Optional[str]) -> dict:
    """
    1) –ü—Ä–æ–≤–µ—Ä—è–µ–º /api/teams/by-tg/{tg_id}.
    2) –ï—Å–ª–∏ 404 ‚Äî —Å–æ–∑–¥–∞—ë–º —á–µ—Ä–µ–∑ /api/users/register.
    """
    st, txt = await api_get(f"/api/teams/by-tg/{tg_id}")
    if st == 200:
        logging.info("GET /api/teams/by-tg -> 200: %s", txt)
        return json.loads(txt)

    if st not in (404,):
        logging.error("GET /api/teams/by-tg/%s -> %s\n%s", tg_id, st, txt)
        raise RuntimeError(f"API GET error {st}: {txt}")

    payload = {"tg_id": str(tg_id), "phone": phone, "first_name": first_name, "last_name": last_name}
    st, txt = await api_post("/api/users/register", payload)
    if st == 200:
        logging.info("POST /api/users/register -> 200: %s", txt)
        return json.loads(txt)
    if st == 423:
        raise PermissionError("REGISTRATION_LOCKED")
    logging.error("POST /api/users/register payload=%s -> %s\n%s", payload, st, txt)
    raise RuntimeError(f"API POST error {st}: {txt}")

# --------------------
# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (CSV)
# --------------------
# phone -> (last_name, first_name)
KNOWN: Dict[str, Tuple[Optional[str], Optional[str]]] = {}


def load_participants(path: str) -> None:
    KNOWN.clear()
    src = path if os.path.exists(path) else PARTICIPANTS_CSV_FALLBACK
    if not os.path.exists(src):
        logging.warning("–ù–µ—Ç –Ω–∏ %s, –Ω–∏ %s ‚Äî –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", path, PARTICIPANTS_CSV_FALLBACK)
        return
    with open(src, newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            p = norm_phone(row.get("phone", ""))
            ln = (row.get("last_name") or "").strip() or None
            fn = (row.get("first_name") or "").strip() or None
            if p:
                KNOWN[p] = (ln, fn)
    logging.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ CSV (–±–æ—Ç): %d (STRICT_WHITELIST=%s)", len(KNOWN), STRICT_WHITELIST)


load_participants(PARTICIPANTS_CSV)

# --------------------
# FSM
# --------------------
class RegStates(StatesGroup):
    waiting_phone = State()
    waiting_name = State()


class PhotoStates(StatesGroup):
    waiting_photo = State()  # –∂–¥—ë–º —Ñ–æ—Ç–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ task_code


router = Router()

# --------------------
# –ü–æ–º–æ—â–Ω–∏–∫–∏: roster / captain
# --------------------
async def fetch_team_roster_for_tg(tg_id: int | str) -> Optional[dict]:
    st, txt = await api_get(f"/api/teams/roster/by-tg/{tg_id}")
    if st == 200:
        return json.loads(txt)

    # fallback: —á–µ—Ä–µ–∑ /api/teams/by-tg + /api/admin/teams (–µ—Å–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    st0, txt0 = await api_get(f"/api/teams/by-tg/{tg_id}")
    if st0 != 200:
        return None
    base = json.loads(txt0)
    st2, txt2 = await api_get("/api/admin/teams")
    if st2 != 200:
        return {"team_id": base["team_id"], "team_name": base.get("team_name"), "is_locked": False,
                "members": [], "captain": None}
    teams: List[dict] = json.loads(txt2)
    for t in teams:
        if t.get("team_id") == base["team_id"]:
            return t
    return {"team_id": base["team_id"], "team_name": base.get("team_name"),
            "is_locked": False, "members": [], "captain": None}


async def fetch_team_info_for_tg(tg_id: int | str) -> Optional[dict]:
    st, txt = await api_get(f"/api/teams/by-tg/{tg_id}")
    if st != 200:
        return None
    return json.loads(txt)


async def is_user_captain(tg_id: int | str) -> bool:
    info = await fetch_team_info_for_tg(tg_id)
    if info and "is_captain" in info:
        return bool(info["is_captain"])

    roster = await fetch_team_roster_for_tg(tg_id)
    if not roster:
        return False
    cap = roster.get("captain")
    if cap and str(cap.get("tg_id")) == str(tg_id):
        return True
    for m in roster.get("members") or []:
        if (m.get("role") or "").upper() == "CAPTAIN" and str(m.get("tg_id")) == str(tg_id):
            return True
    return False


def format_team_roster(team: dict) -> str:
    """
    –¢–µ–ª–µ–≥—Ä–∞–º-—Å—Ç–∏–ª—å, –±–µ–∑ —Ü–≤–µ—Ç–∞/–º–∞—Ä—à—Ä—É—Ç–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤ –∏ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏.
    """
    team_name = team.get("team_name", "–ö–æ–º–∞–Ω–¥–∞")
    is_locked = team.get("is_locked", False)
    lock_emoji = "üîí" if is_locked else "üîì"

    members: List[dict] = team.get("members") or []
    if not isinstance(members, list):
        members = []
    members_count = len(members)

    lines = []
    cap = team.get("captain")
    if cap:
        full = f"{(cap.get('last_name') or '').strip()} {(cap.get('first_name') or '').strip()}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        lines.append(f"üëë {full}")

    for m in members:
        if cap and m.get("user_id") == cap.get("user_id"):
            continue
        role = (m.get("role") or "").upper()
        marker = "üëë" if role == "CAPTAIN" else "‚Ä¢"
        full = f"{(m.get('last_name') or '').strip()} {(m.get('first_name') or '').strip()}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        lines.append(f"{marker} {full}")

    body = "\n".join(lines) if lines else "_–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤._"
    status_line = f"\n\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: *{members_count}* –∏–∑ *{TEAM_SIZE}*"
    return f"*–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞:* {team_name} {lock_emoji}{status_line}\n\n*–°–æ—Å—Ç–∞–≤:*\n{body}"


# === QR support: –ø–∞—Ä—Å–∏–Ω–≥ payload –∏–∑ /start ===
def get_start_payload(message: Message) -> str | None:
    t = (message.text or "").strip()
    if not t.startswith("/start"):
        return None
    parts = t.split(maxsplit=1)
    if len(parts) < 2:
        return None
    return parts[1].strip() or None


QR_PREFIX = "qr_"

async def handle_qr_payload(message: Message, payload: str):
    st_check, _ = await api_get(f"/api/teams/by-tg/{message.from_user.id}")
    if st_check == 404:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ /reg –∏ –≤–µ—Ä–Ω–∏—Å—å –∫ QR.")
        return
    if st_check != 200:
        await message.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    if not await is_user_captain(message.from_user.id):
        await message.answer(
            "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥—ã –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü–µ—Ä–µ–¥–∞–π QR –∫–∞–ø–∏—Ç–∞–Ω—É –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /scan <–∫–æ–¥>."
        )
        return

    code = payload[len(QR_PREFIX):] if payload.startswith(QR_PREFIX) else payload

    st, txt = await api_post("/api/game/scan", {"tg_id": str(message.from_user.id), "code": code})
    try:
        data = json.loads(txt) if txt else {}
    except json.JSONDecodeError:
        data = {}

    if st == 200:
        already = bool(data.get("already_solved"))
        task_title = data.get("task_title", "–ó–∞–¥–∞–Ω–∏–µ")
        points = int(data.get("points_earned") or 0)
        total = int(data.get("team_total_points") or 0)
        if already:
            await message.answer(
                f"‚ÑπÔ∏è –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –∑–∞—á—Ç–µ–Ω–æ:\n*{task_title}*\n\n"
                f"–û—á–∫–∏ –∫–æ–º–∞–Ω–¥—ã: *{total}*.",
                parse_mode="Markdown",
            )
        else:
            await message.answer(
                f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n*{task_title}*\n+{points} –æ—á–∫.\n"
                f"–°—É–º–º–∞ –æ—á–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: *{total}*.",
                parse_mode="Markdown",
            )
        return

    detail = (data.get("detail") or "").strip().lower()
    if st == 404:
        await message.answer("QR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    if st == 409:
        if "not started" in detail:
            await message.answer(
                "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –µ—â—ë *–Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞*.\n"
                "–ö–∞–ø–∏—Ç–∞–Ω –¥–æ–ª–∂–µ–Ω: 1) –∑–∞–¥–∞—Ç—å *—Å–≤–æ—ë –∏–º—è –∫–æ–º–∞–Ω–¥—ã* (/rename –ù–æ–≤–æ–µ–ò–º—è), 2) –Ω–∞–∂–∞—Ç—å */startquest*.",
                parse_mode="Markdown",
            )
        else:
            await message.answer(data.get("detail") or "–ù–µ–ª—å–∑—è –∑–∞—Å—á–∏—Ç–∞—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–µ–π—á–∞—Å.")
        return
    if st == 423:
        await message.answer("–ò–≥—Ä–∞ —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É.")
        return
    await message.answer(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ({st}). –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã
# --------------------
@router.message(CommandStart())
async def start(message: Message):
    payload = get_start_payload(message)
    if payload:
        return await handle_qr_payload(message, payload)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–≤–µ—Å—Ç-–±–æ—Ç.\n"
        "‚Ä¢ /reg ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "‚Ä¢ /team ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã\n"
        "‚Ä¢ /rename <–Ω–æ–≤–æ–µ –∏–º—è> ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É (—Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω, –æ–¥–∏–Ω —Ä–∞–∑ –¥–æ —Å—Ç–∞—Ä—Ç–∞)\n"
        "‚Ä¢ /startquest ‚Äî –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç (—Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω, –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è)\n"
        "‚Ä¢ /scan <–∫–æ–¥> ‚Äî –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Å QR (—Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω)\n"
        "‚Ä¢ /photo <–∫–æ–¥> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω)\n"
        "‚Ä¢ /lb ‚Äî –ª–∏–¥–µ—Ä–±–æ—Ä–¥\n"
        "‚Ä¢ /app ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
        reply_markup=webapp_markup(message.from_user.id),
    )

@router.message(F.text == "/app")
async def open_app(message: Message):
    await message.answer(
        "–û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤ Telegram):",
        reply_markup=webapp_markup(message.from_user.id),
    )

@router.message(F.text == "/reg")
async def reg_flow(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await state.set_state(RegStates.waiting_phone)
    await message.answer("–®–∞–≥ 1/2: –ø–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).", reply_markup=kb)

@router.message(F.text.regexp(r"^/scan(\s+.+)?$"))
async def manual_scan(message: Message):
    txt = (message.text or "")
    parts = txt.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/scan <–∫–æ–¥>`", parse_mode="Markdown")
    payload = parts[1].strip()
    await handle_qr_payload(message, payload)

@router.message(F.text.regexp(r"^/rename(\s+.+)?$"))
async def rename_team(message: Message):
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/rename –ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã`", parse_mode="Markdown")

    if not await is_user_captain(message.from_user.id):
        return await message.answer("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω (–¥–æ —Å—Ç–∞—Ä—Ç–∞).")

    new_name = parts[1].strip()
    st, txt = await api_post("/api/team/rename", {"tg_id": str(message.from_user.id), "new_name": new_name})
    try:
        data: Dict[str, Any] = json.loads(txt) if txt else {}
    except json.JSONDecodeError:
        data = {}

    if st == 200 and data.get("ok"):
        team_name = data.get("team_name") or new_name
        return await message.answer(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã: *{team_name}*.", parse_mode="Markdown")
    if st == 403:
        return await message.answer("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω.")
    if st == 409:
        return await message.answer(data.get("detail") or "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
    if st == 404:
        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è /reg.")
    await message.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@router.message(F.text == "/startquest")
async def start_quest(message: Message):
    """
    –ö–∞–ø–∏—Ç–∞–Ω —Å—Ç–∞—Ä—Ç—É–µ—Ç –∫–≤–µ—Å—Ç. –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç:
    - –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–∞—è,
    - –∏–º—è –∑–∞–¥–∞–Ω–æ (–Ω–µ ¬´–ö–æ–º–∞–Ω–¥–∞ ‚ÑñN¬ª),
    - –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ.
    """
    if not await is_user_captain(message.from_user.id):
        return await message.answer("–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã.")

    st, txt = await api_post_form("/api/game/start", {"tg_id": str(message.from_user.id)})
    try:
        data = json.loads(txt) if txt else {}
    except json.JSONDecodeError:
        data = {}

    if st == 200 and data.get("ok"):
        return await message.answer("üöÄ –ö–≤–µ—Å—Ç –Ω–∞—á–∞—Ç! –£–¥–∞—á–∏!")
    if st == 200 and (data.get("message") or "").lower().startswith("already"):
        return await message.answer("–ö–≤–µ—Å—Ç —É–∂–µ –±—ã–ª –Ω–∞—á–∞—Ç. –£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Ç–æ—á–∫–∞—Ö!")
    if st == 409:
        detail = data.get("detail") or ""
        if detail:
            return await message.answer(detail)
        return await message.answer(
            "–°—Ç–∞—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ *–ø–æ–ª–Ω–∞—è* –∏ —É –Ω–µ—ë –∑–∞–¥–∞–Ω–æ —Å–≤–æ—ë –∏–º—è —á–µ—Ä–µ–∑ /rename.",
            parse_mode="Markdown",
        )
    if st == 404:
        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏ /reg.")
    return await message.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@router.message(F.text.regexp(r"^/photo(\s+.+)?$"))
async def photo_command(message: Message, state: FSMContext):
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/photo <task_code>` ‚Äî –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.", parse_mode="Markdown")

    if not await is_user_captain(message.from_user.id):
        return await message.answer("–§–æ—Ç–æ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω.")

    task_code = parts[1].strip()
    await state.update_data(photo_task_code=task_code)
    await state.set_state(PhotoStates.waiting_photo)
    await message.answer("–û–∫! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ *—Ñ–æ—Ç–æ* –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.", parse_mode="Markdown")

@router.message(StateFilter(PhotoStates.waiting_photo), F.content_type == ContentType.PHOTO)
async def on_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    task_code = data.get("photo_task_code")
    if not task_code:
        await state.clear()
        return await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /photo –µ—â—ë —Ä–∞–∑.")

    photo = message.photo[-1] if message.photo else None
    if not photo:
        return await message.answer("–ù–µ –≤–∏–∂—É —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")

    payload = {"tg_id": str(message.from_user.id), "task_code": task_code, "tg_file_id": photo.file_id}
    st, txt = await api_post("/api/game/photo", payload)
    try:
        data = json.loads(txt) if txt else {}
    except json.JSONDecodeError:
        data = {}

    if st == 200:
        await state.clear()
        return await message.answer("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ!")
    if st in (403, 409, 423):
        await state.clear()
        detail = (data.get("detail") or "").lower()
        if "not started" in detail:
            return await message.answer(
                "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –µ—â—ë –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞. –ö–∞–ø–∏—Ç–∞–Ω—É –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å */startquest* –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.",
                parse_mode="Markdown",
            )
        return await message.answer(data.get("detail") or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å–µ–π—á–∞—Å.")
    if st == 404:
        await state.clear()
        return await message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    await message.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@router.message(F.text == "/cancel")
async def cancel_flow(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–∫, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–º–µ–Ω–∏–ª. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–µ—Ä–∏ /reg.")

@router.message(F.content_type == ContentType.CONTACT)
async def on_contact(message: Message, state: FSMContext):
    c = message.contact
    if c and c.user_id and message.from_user and c.user_id != message.from_user.id:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å *—Å–≤–æ–π* –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.", parse_mode="Markdown")

    phone = norm_phone(c.phone_number if c else "")
    if not phone:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ /reg.")
        return
    await state.update_data(phone=phone)
    await state.set_state(RegStates.waiting_name)
    await message.answer("–®–∞–≥ 2/2: –ø—Ä–∏—à–ª–∏ *–∏–º—è* (–∫–∞–∫ —Ç–µ–±—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ).", parse_mode="Markdown")

@router.message(StateFilter(RegStates.waiting_name), F.text)
async def on_name(message: Message, state: FSMContext):
    first_name, last_name = parse_name_simple(message.text or "")
    if not first_name or len(first_name) < 2:
        return await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü—Ä–∏—à–ª–∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")

    data = await state.get_data()
    phone = data.get("phone", "")

    if not phone:
        await state.set_state(RegStates.waiting_phone)
        return await message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –ù–∞–∂–º–∏ /reg –∏ –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    if STRICT_WHITELIST and phone not in KNOWN:
        return await message.answer(
            "–ù–µ –Ω–∞—à—ë–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ. –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n"
            "–ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )

    try:
        info = await register_user_via_api(
            tg_id=message.from_user.id, phone=phone, first_name=first_name, last_name=last_name
        )
        team = await fetch_team_roster_for_tg(message.from_user.id)
        if team:
            await message.answer(format_team_roster(team), parse_mode="Markdown")
            members_count = len(team.get("members") or [])
            if await is_user_captain(message.from_user.id) and members_count >= TEAM_SIZE:
                await message.answer(
                    "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–ª–Ω–æ–π. –ó–∞–¥–∞–π –∏–º—è: `/rename <–ù–∞–∑–≤–∞–Ω–∏–µ>` –∏ –∑–∞–ø—É—Å—Ç–∏ –∫–≤–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π */startquest*.",
                    parse_mode="Markdown",
                )
        else:
            team_name = (info or {}).get("team_name", "—Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞")
            await message.answer(f"–ì–æ—Ç–æ–≤–æ! –¢—ã –≤ –∫–æ–º–∞–Ω–¥–µ: *{team_name}*.", parse_mode="Markdown")
        await state.clear()
    except PermissionError:
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É.")
        await state.clear()
    except Exception:
        logging.exception("Register API error")
        await message.answer("–°–µ—Ä–≤–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É.")

@router.message(F.text == "/team")
async def my_team(message: Message):
    try:
        team = await fetch_team_roster_for_tg(message.from_user.id)
        if not team:
            return await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–±–µ—Ä–∏ /reg.")
        text = format_team_roster(team)
        return await message.answer(text, parse_mode="Markdown")
    except Exception:
        return await message.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@router.message(F.text.in_({"/lb", "/leaderboard"}))
async def leaderboard(message: Message):
    try:
        st, txt = await api_get("/api/leaderboard")
        if st != 200:
            return await message.answer("–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        rows: List[dict] = json.loads(txt)
        if not rows:
            return await message.answer("–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        out_lines = ["*–õ–∏–¥–µ—Ä–±–æ—Ä–¥* (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è):"]
        for i, r in enumerate(rows[:10], start=1):
            name = r.get("team_name", f"–ö–æ–º–∞–Ω–¥–∞ #{r.get('team_id')}")
            done = r.get("tasks_done", 0)
            total = r.get("total_tasks", 0)
            elapsed = r.get("elapsed_seconds")
            if r.get("finished_at"):
                t_line = f"{elapsed}s"
                out_lines.append(f"{i}. *{name}* ‚Äî {done}/{total}, ‚è± {t_line}")
            elif r.get("started_at"):
                t_line = f"{elapsed}s"
                out_lines.append(f"{i}. *{name}* ‚Äî {done}/{total} (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, {t_line})")
            else:
                out_lines.append(f"{i}. *{name}* ‚Äî –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏")
        await message.answer("\n".join(out_lines), parse_mode="Markdown")
    except Exception:
        logging.exception("leaderboard error")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥.")

@router.message(F.text == "/ping")
async def ping_api(message: Message):
    try:
        st, txt = await api_get("/health")
        await message.answer(f"API /health ‚Üí {st}: {txt}")
    except Exception as e:
        await message.answer(f"API error: {e!r}")

# --------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (v3)
# --------------------
@router.errors()
async def on_error(event: ErrorEvent):
    exc = event.exception

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚Äî —à—Ç–∞—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    if isinstance(exc, TelegramForbiddenError):
        logging.info("Ignored Forbidden: user blocked the bot")
        return True  # –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É–µ–º
    logging.exception("Unhandled exception in bot", exc_info=exc)
    return True

# --------------------
# Entry point
# --------------------
async def main():
    logging.info("Starting aiogram polling...")
    bot = Bot(BOT_TOKEN, parse_mode=None)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)

    global HTTP
    HTTP = aiohttp.ClientSession(timeout=CLIENT_TIMEOUT)
    try:
        await dp.start_polling(bot, polling_timeout=30, drop_pending_updates=True)
    finally:
        try:
            if HTTP and not HTTP.closed:
                await HTTP.close()
        except Exception:
            pass

if __name__ == "__main__":
    asyncio.run(main())