from __future__ import annotations
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from ..config import ADMIN_CHAT_ID
from ..api_client import admin_approve_submission, admin_reject_submission, admin_queue_register, admin_reject_by_reply, submission_get, leaderboard, get_all_users
from ..states import BroadcastStates

router = Router()

def _is_admin_chat(m: Message | CallbackQuery) -> bool:
    chat_id = m.message.chat.id if isinstance(m, CallbackQuery) else m.chat.id
    return chat_id == ADMIN_CHAT_ID

@router.callback_query(F.data.startswith("mod:"))
async def on_moderate(cq: CallbackQuery, bot: Bot):
    if not _is_admin_chat(cq):
        return await cq.answer("–¢–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ.", show_alert=True)
    parts = cq.data.split(":")  # mod:appr:123
    action, sid = parts[1], int(parts[2])
    if action == "appr":
        st, _ = await admin_approve_submission(sid, reviewer_tg=cq.from_user.id)
        if st == 200:
            await cq.message.edit_reply_markup(reply_markup=None)
            await cq.answer("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ")
            st2, s = await submission_get(sid)
            if st2 == 200 and s.get("user",{}).get("tg_id"):
                await bot.send_message(s["user"]["tg_id"], "–í–∞—à–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")
        else:
            await cq.answer("–û—à–∏–±–∫–∞", show_alert=True)
    elif action == "rej":
        # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
        await cq.message.edit_reply_markup(reply_markup=None)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É
        reply_msg = await cq.message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ.")
        # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–≤—è–∑–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ reply (–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π)
        await admin_queue_register(ADMIN_CHAT_ID, reply_msg.message_id, sid)
        await cq.answer("–ñ–¥—É –ø—Ä–∏—á–∏–Ω—É‚Ä¶")

@router.message(F.chat.id == ADMIN_CHAT_ID, BroadcastStates.waiting_message, F.reply_to_message)
async def process_broadcast_reply(m: Message, state: FSMContext, bot: Bot):
    logging.info(f"=== BROADCAST REPLY HANDLER TRIGGERED ===")
    logging.info(f"Processing broadcast reply from admin {m.from_user.id}, text: '{m.text}'")
    message_text = m.text or "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    logging.info(f"Processing broadcast message from admin {m.from_user.id}: {message_text[:100]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    st, users = await get_all_users()
    if st != 200 or not users:
        await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        await state.clear()
        return
    
    await m.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {len(users)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    sent_count = 0
    failed_count = 0
    
    for user in users:
        try:
            await bot.send_message(user["tg_id"], message_text)
            sent_count += 1
            logging.info(f"Sent broadcast to user {user['tg_id']} ({user.get('first_name', 'Unknown')})")
        except Exception as e:
            failed_count += 1
            logging.error(f"Failed to send broadcast to user {user['tg_id']}: {e}")
    
    await state.clear()
    await m.answer(
        f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(users)}",
        parse_mode="Markdown"
    )

@router.message(F.chat.id == ADMIN_CHAT_ID, F.text.in_({"/leaderboard","/lb","/leaderbord"}))
async def cmd_lb(m: Message):
    st, rows = await leaderboard()
    if st != 200 or not rows:
        return await m.answer("üìä –ü–æ–∫–∞ –ø—É—Å—Ç–æ.")
    
    out = ["üèÜ *–õ–∏–¥–µ—Ä–±–æ—Ä–¥*:"]
    for i, r in enumerate(rows, 1):
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
        if i == 1:
            medal = "ü•á"
        elif i == 2:
            medal = "ü•à"
        elif i == 3:
            medal = "ü•â"
        else:
            medal = f"{i}."
        
        out.append(f"{medal} *{r['team_name']}* ‚Äî {r['total_points']} –±–∞–ª–ª–æ–≤ (üì∞ {r['article_points']}, üì∑ {r['photo_points']})")
    await m.answer("\n".join(out), parse_mode="Markdown")

@router.message(F.chat.id == ADMIN_CHAT_ID, F.text.in_({"/broadcast", "/—Ä–∞—Å—Å—ã–ª–∫–∞"}))
async def cmd_broadcast(m: Message, state: FSMContext):
    logging.info(f"Broadcast command from admin {m.from_user.id}")
    await state.set_state(BroadcastStates.waiting_message)
    logging.info(f"Set state to BroadcastStates.waiting_message for admin {m.from_user.id}")
    await m.answer(
        "üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
        "üí¨ *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ* —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        parse_mode="Markdown"
    )

@router.message(F.chat.id == ADMIN_CHAT_ID, BroadcastStates.waiting_message, F.text == "/cancel")
async def cancel_broadcast(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@router.message(F.chat.id == ADMIN_CHAT_ID, F.reply_to_message)
async def on_reason(m: Message, bot: Bot, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ broadcast
    current_state = await state.get_state()
    if current_state == BroadcastStates.waiting_message:
        logging.info(f"Ignoring reply message in broadcast state: {m.text}")
        return
    logging.info(f"Admin reply message: chat_id={m.chat.id}, user_id={m.from_user.id}, text='{m.text}', reply_to={m.reply_to_message.message_id}")
    logging.info(f"Processing reject reason from admin {m.from_user.id}: {m.text}")
    
    try:
        reply_to = m.reply_to_message.message_id
        st, r = await admin_reject_by_reply(ADMIN_CHAT_ID, reply_to, reason=m.text or "", reviewer_tg=m.from_user.id)
        logging.info(f"Reject API response: status={st}, response={r}")
        
        if st == 200:
            await m.reply("–ü—Ä–∏—á–∏–Ω–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")
            # —É–≤–µ–¥–æ–º–∏–º –∞–≤—Ç–æ—Ä–∞
            sid = r.get("submission_id")
            if sid:
                st2, s = await submission_get(sid)
                logging.info(f"Get submission response: status={st2}, submission={s}")
                
                if st2 == 200 and s and s.get("user") and s["user"].get("tg_id"):
                    user_tg_id = s["user"]["tg_id"]
                    reason_text = f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå\n–ü—Ä–∏—á–∏–Ω–∞: {m.text or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
                    logging.info(f"Sending rejection notification to user {user_tg_id}: {reason_text}")
                    try:
                        await bot.send_message(user_tg_id, reason_text)
                        logging.info(f"Successfully sent rejection notification to user {user_tg_id}")
                    except Exception as e:
                        logging.error(f"Failed to send message to user {user_tg_id}: {e}")
                else:
                    logging.warning(f"Could not send rejection notification: st2={st2}, user_tg_id={s.get('user',{}).get('tg_id') if s else 'None'}")
            else:
                logging.warning(f"No submission_id in response: {r}")
        else:
            logging.error(f"Failed to reject submission: status={st}, response={r}")
    except Exception as e:
        logging.error(f"Error processing reject reason: {e}")
        await m.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")

@router.message(F.chat.id == ADMIN_CHAT_ID)
async def on_admin_message_debug(m: Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Admin message debug: chat_id={m.chat.id}, user_id={m.from_user.id}, text='{m.text}', state='{current_state}', reply_to={m.reply_to_message.message_id if m.reply_to_message else None}")