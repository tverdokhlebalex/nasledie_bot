# bot/handlers/captain.py
from aiogram import Router, F
from aiogram.types import Message
from aiogram.enums import ContentType

from ..api_client import (
    team_by_tg, team_rename, start_game, submit_photo, roster_by_tg, game_current
)
from ..watchers import WATCHERS
from ..texts import RULES_SHORT, STARTED_MSG, APP_HINT, format_task_card
from ..keyboards import kb_confirm_start, ib_webapp
from ..config import API_BASE

router = Router()

RESERVED_INPUTS = {
    "–°—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å", "–°—Ç–∞—Ä—Ç—É–µ–º", "–°—Ç–∞—Ä—Ç—É–µ–º!", "/startquest",
}

# ---------- helpers ----------
async def _load_team(m: Message):
    st, info = await team_by_tg(m.from_user.id)
    if st != 200:
        await m.answer("–¢—ã –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –ù–∞–±–µ—Ä–∏ /reg.")
        return None
    return info

def _is_captain(info: dict) -> bool:
    return bool(info and info.get("is_captain"))

async def _broadcast_to_team(m: Message, text: str, *, markdown: bool = True):
    st, roster = await roster_by_tg(m.from_user.id)
    parse_mode = "Markdown" if markdown else None
    if st != 200 or not roster:
        await m.answer(text, parse_mode=parse_mode)
        return
    sent = set()
    for mem in (roster.get("members") or []):
        tg_id = mem.get("tg_id")
        if not tg_id or tg_id in sent:
            continue
        try:
            await m.bot.send_message(tg_id, text, parse_mode=parse_mode)
            sent.add(tg_id)
        except Exception:
            pass

async def _push_current_task_to_all(m: Message):
    st, data = await game_current(m.from_user.id)
    if st != 200 or data.get("finished"):
        return
    cp = data.get("checkpoint") or {}
    await _broadcast_to_team(m, format_task_card(cp), markdown=True)

# ---------- —Å—Ç–∞—Ä—Ç (—Å—Ç–∞–≤–∏–º –í–´–®–ï maybe_team_name) ----------
@router.message(F.text.in_({"/startquest", "–°—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å"}))
async def cmd_start(m: Message):
    info = await _load_team(m)
    if not info or not _is_captain(info):
        return

    st, resp = await start_game(m.from_user.id)
    if st == 200 and resp.get("ok"):
        # –°–æ–æ–±—â–∞–µ–º –≤—Å–µ–º –æ —Å—Ç–∞—Ä—Ç–µ
        await _broadcast_to_team(m, "üöÄ –ö–≤–µ—Å—Ç –Ω–∞—á–∞—Ç!", markdown=False)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ç—á–µ—Ä ‚Äî –æ–Ω —Å–∞–º —Ä–∞–∑–æ—à–ª—ë—Ç –ü–ï–†–í–û–ï –∑–∞–¥–∞–Ω–∏–µ 1 —Ä–∞–∑
        if not WATCHERS.running(info["team_id"]):
            WATCHERS.start(
                team_id=info["team_id"],
                chat_id=m.chat.id,
                tg_id=m.from_user.id,
                bot=m.bot,
            )

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await m.answer(
            APP_HINT,
            parse_mode="Markdown",
            reply_markup=ib_webapp(f"{API_BASE}/webapp"),
        )
    elif st == 200:
        await m.answer(resp.get("message") or "–£–∂–µ –Ω–∞—á–∞–ª–∏.")
    else:
        await m.answer(resp.get("detail") or "–°—Ç–∞—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


# ---------- –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–Ω–∏–∂–µ –∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤) ----------
@router.message(F.text & ~F.text.startswith("/") & ~F.text.in_(RESERVED_INPUTS))
async def maybe_team_name(m: Message):
    info = await _load_team(m)
    if not info or not _is_captain(info):
        return
    # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑, –¥–æ —Å—Ç–∞—Ä—Ç–∞; —Å–µ—Ä–≤–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç
    if not info.get("can_rename", True) or info.get("started_at"):
        return
    new_name = (m.text or "").strip()
    if len(new_name) < 2:
        return
    st, resp = await team_rename(m.from_user.id, new_name)
    if st == 200 and resp.get("ok"):
        await m.answer(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã: *{resp.get('team_name')}*.", parse_mode="Markdown")
        await m.answer(RULES_SHORT, parse_mode="Markdown")
        await m.answer("–ì–æ—Ç–æ–≤—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å?", reply_markup=kb_confirm_start())
    # 409 –∏ –ø—Ä–æ—á–µ–µ ‚Äî –º–æ–ª—á–∞

@router.message(F.text.regexp(r"^/rename(\s+.+)?$"))
async def cmd_rename(m: Message):
    info = await _load_team(m)
    if not info or not _is_captain(info):
        return
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/rename –ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã`", parse_mode="Markdown")
    st, resp = await team_rename(m.from_user.id, parts[1].strip())
    if st == 200 and resp.get("ok"):
        await m.answer(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã: *{resp.get('team_name')}*.", parse_mode="Markdown")
        await m.answer(RULES_SHORT, parse_mode="Markdown")
        await m.answer("–ì–æ—Ç–æ–≤—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å?", reply_markup=kb_confirm_start())
    else:
        await m.answer(resp.get("detail") or "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

# ---------- —Ñ–æ—Ç–æ (—Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω) ----------
@router.message(F.text == "/photo")
async def cmd_photo_hint(m: Message):
    info = await _load_team(m)
    if not info or not _is_captain(info):
        return
    await m.answer("–û–∫! –ü—Ä–∏—à–ª–∏ *—Ñ–æ—Ç–æ* —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", parse_mode="Markdown")

@router.message(F.content_type == ContentType.PHOTO)
async def on_any_photo(m: Message):
    info = await _load_team(m)
    if not info or not _is_captain(info):
        return await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –∏–º–µ–µ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞. –°–æ –º–Ω–æ–π –æ–±—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω.")
    file_id = m.photo[-1].file_id
    st2, resp = await submit_photo(m.from_user.id, file_id)
    if st2 == 200 and resp.get("ok"):
        await m.answer("–ü—Ä–∏–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –ñ–¥—ë–º ‚ö°")
        WATCHERS.start(team_id=info["team_id"], chat_id=m.chat.id, tg_id=m.from_user.id, bot=m.bot)
    else:
        await m.answer(resp.get("detail") or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")
